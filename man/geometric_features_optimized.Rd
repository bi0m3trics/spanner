% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geometric_features_optimized.R
\name{geometric_features_optimized}
\alias{geometric_features_optimized}
\title{computes all available features. Options include:
\itemize{
\item Eigenvalue features: "lambda1", "lambda2", "lambda3", "sum_eigenvalues"
\item Shape features: "omnivariance", "eigenentropy", "anisotropy", "planarity",
"linearity", "sphericity", "verticality", "surface_variation"
\item Normal/PCA: "nx", "ny", "nz", "pca1", "pca2"
\item Curvature: "mean_curvature", "gaussian_curvature", "normal_change_rate"
\item Surface: "roughness", "signed_roughness"
\item Density: "num_neighbors", "surface_density", "volume_density"
\item Other: "first_order_moment", "height_above_ground", "relative_height", "intensity_variance"
}}
\usage{
geometric_features_optimized(las, radius = 0.1, ncpu = 8, features = NULL)
}
\value{
A data.table with all computed geometric features
}
\description{
computes all available features. Options include:
\itemize{
\item Eigenvalue features: "lambda1", "lambda2", "lambda3", "sum_eigenvalues"
\item Shape features: "omnivariance", "eigenentropy", "anisotropy", "planarity",
"linearity", "sphericity", "verticality", "surface_variation"
\item Normal/PCA: "nx", "ny", "nz", "pca1", "pca2"
\item Curvature: "mean_curvature", "gaussian_curvature", "normal_change_rate"
\item Surface: "roughness", "signed_roughness"
\item Density: "num_neighbors", "surface_density", "volume_density"
\item Other: "first_order_moment", "height_above_ground", "relative_height", "intensity_variance"
}
}
\section{Feature Definitions}{

\loadmathjax

\strong{Eigenvalue-based features:}
\itemize{
\item \code{lambda1}: First eigenvalue, \mjeqn{\lambda_{1}}{ASCII representation}
\item \code{lambda2}: Second eigenvalue, \mjeqn{\lambda_{2}}{ASCII representation}
\item \code{lambda3}: Third eigenvalue, \mjeqn{\lambda_{3}}{ASCII representation}
\item \code{sum_eigenvalues}: Sum of eigenvalues, \mjeqn{\sum_{i=1}^{3} \lambda_{i}}{ASCII representation}
\item \code{omnivariance}: \mjeqn{(\lambda_{1} \lambda_{2} \lambda_{3})^{1/3}}{ASCII representation}
\item \code{eigenentropy}: \mjeqn{-\sum_{i=1}^{3} \lambda_{i} \ln(\lambda_{i})}{ASCII representation}
\item \code{anisotropy}: \mjeqn{(\lambda_{1} - \lambda_{3}) / \lambda_{1}}{ASCII representation}
\item \code{planarity}: \mjeqn{(\lambda_{2} - \lambda_{3}) / \lambda_{1}}{ASCII representation}
\item \code{linearity}: \mjeqn{(\lambda_{1} - \lambda_{2}) / \lambda_{1}}{ASCII representation}
\item \code{sphericity}: \mjeqn{\lambda_{3} / \lambda_{1}}{ASCII representation}
\item \code{verticality}: \mjeqn{1 - |\langle (0,0,1), e_3 \rangle|}{ASCII representation}
\item \code{surface_variation}: \mjeqn{\lambda_{3} / \sum_{i=1}^{3} \lambda_{i}}{ASCII representation} (curvature)
}

\strong{Curvature features:}
\itemize{
\item \code{mean_curvature}: Mean curvature from quadric surface fitting
\item \code{gaussian_curvature}: Gaussian curvature from quadric surface fitting
\item \code{normal_change_rate}: Same as surface_variation (CloudCompare definition)
}

\strong{Surface quality:}
\itemize{
\item \code{roughness}: Distance from point to best-fit plane
\item \code{signed_roughness}: Signed distance from point to best-fit plane
}

\strong{Density features:}
\itemize{
\item \code{num_neighbors}: Number of neighbors within radius
\item \code{surface_density}: \mjeqn{N / (\pi r^2)}{ASCII representation}
\item \code{volume_density}: \mjeqn{N / (4/3 \pi r^3)}{ASCII representation}
}

\strong{Other features:}
\itemize{
\item \code{first_order_moment}: Average distance to local centroid
\item \code{height_above_ground}: Height above minimum Z in neighborhood
\item \code{relative_height}: Normalized height in neighborhood (0-1)
\item \code{intensity_variance}: Variance of intensity values in neighborhood (if available)
\item \code{nx}, \code{ny}, \code{nz}: Components of surface normal vector
\item \code{pca1}, \code{pca2}: First two principal component scores
}
}

\examples{
\dontrun{
# Load example data
LASfile <- system.file("extdata", "MixedConifer.laz", package="lidR")
las <- readLAS(LASfile)

# Compute all features (fastest)
features <- geometric_features_optimized(las, radius = 0.1, ncpu = 8)

# Compute only specific features
shape_features <- geometric_features_optimized(las, radius = 0.1, ncpu = 8,
  features = c("linearity", "planarity", "sphericity", "roughness"))

# Compare performance with original
system.time(old <- eigen_metrics(las, radius = 0.1, ncpu = 8))
system.time(new <- geometric_features_optimized(las, radius = 0.1, ncpu = 8))
}

}
